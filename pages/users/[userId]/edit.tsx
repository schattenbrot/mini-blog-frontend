import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import axios, { AxiosError, AxiosResponse } from "axios";
import Head from "next/head";
import { useRouter } from "next/router";
import { FormEventHandler, MouseEventHandler, useEffect } from "react";
import styles from "../../../styles/pages/Register.module.scss";
import Button from "../../../components/base/Button";
import {
  validateEmail,
  validatePassword,
  validateUsername,
} from "../../../helpers/validation";
import useInput from "../../../hooks/useInput";
import { ParsedUrlQuery } from "querystring";
import { UserType } from "../../../models/models";

export type EditUserProps = {
  selectedUserId: string;
};

const EditUserPage: NextPage<EditUserProps> = (props) => {
  const { selectedUserId: userId } = props;
  const router = useRouter();

  const {
    value: username,
    bind: bindUsername,
    reset: resetUsername,
    setValue: setUsername,
  } = useInput("");
  const {
    value: email,
    bind: bindEmail,
    reset: resetEmail,
    setValue: setEmail,
  } = useInput("");
  const {
    value: password,
    bind: bindPassword,
    reset: resetPassword,
  } = useInput("");
  const {
    value: confirmPassword,
    bind: bindConfirmPassword,
    reset: resetConfirmPassword,
  } = useInput("");

  useEffect(() => {
    (async () => {
      try {
        const response: AxiosResponse<any, any> = await axios.get(
          `/users/${userId}`
        );
        const data = response.data as UserType;
        setUsername(data.name);
        setEmail(data.email);
      } catch (error: unknown | AxiosError) {
        if (axios.isAxiosError(error)) {
          console.error(error.response?.data);
        } else {
          console.error(error);
        }
      }
    })();
  }, [userId, setEmail, setUsername]);

  const toLoginHandler: MouseEventHandler = (event) => {
    event.preventDefault();
    router.push("/login");
  };

  const submitHandler: FormEventHandler = async (event) => {
    event.preventDefault();

    // simple form validation
    if (!validateUsername(username)) {
      return;
    }
    if (!validateEmail(email)) {
      return;
    }
    if (!validatePassword(password) && password !== confirmPassword) {
      return;
    }

    const payload = {
      name: username,
      email,
      password,
    };

    try {
      const response: AxiosResponse<any, any> = await axios.patch(
        `/users/${userId}`,
        payload,
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      if (response.data.message == "up to date") {
        console.warn("up to date");
      }

      router.push("/users/" + userId);
    } catch (err: unknown | AxiosError) {
      if (axios.isAxiosError(err)) {
        console.error(err.response?.data);
        return;
      }
      console.error(err);
    }
  };

  const resetHandler: FormEventHandler = (event) => {
    event.preventDefault();
    resetUsername();
    resetEmail();
    resetPassword();
    resetConfirmPassword();
  };

  return (
    <>
      <Head>
        <title>Edit User - ${userId}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <div className={styles.container}>
        <h1>Edit User - {userId}</h1>
        <form onSubmit={submitHandler} onReset={resetHandler}>
          <div className={styles["input-element"]}>
            <label htmlFor='username'>Username</label>
            <input
              type='username'
              name='username'
              id='username'
              {...bindUsername}
            />
          </div>
          <div className={styles["input-element"]}>
            <label htmlFor='email'>Email</label>
            <input type='email' name='email' id='email' {...bindEmail} />
          </div>
          <div className={styles["input-element"]}>
            <label htmlFor='password'>Password</label>
            <input
              type='password'
              name='password'
              id='password'
              {...bindPassword}
            />
          </div>
          <div className={styles["input-element"]}>
            <label htmlFor='confirm-password'>Confirm Password</label>
            <input
              type='password'
              name='confirm-password'
              id='confirm-password'
              {...bindConfirmPassword}
            />
          </div>
          <div className={styles.control}>
            <Button type='reset' className='danger'>
              Reset
            </Button>
            <Button type='submit' className='ok'>
              Update
            </Button>
          </div>
        </form>
      </div>
    </>
  );
};

interface IParams extends ParsedUrlQuery {
  userId: string;
}

export const getStaticProps: GetStaticProps = async (context) => {
  const { userId } = context.params as IParams;

  return {
    props: {
      selectedUserId: userId,
    },
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default EditUserPage;
